#!/usr/bin/env php
<?php
set_error_handler(function ($errno, $errstr, $errfile = '', $errline = null) {
    fwrite(STDERR, trim($errstr) . "\n");
    fwrite(STDERR, 'Line: ' . $errline . "\n");
    exit(1);
});
define('DOCKER_REPOSITORY', 'punicdata');
try {
    $punicDataDirectory = dirname(__DIR__);
    $dockerFileDirectory = $punicDataDirectory . DIRECTORY_SEPARATOR . 'docker';
    $dockerFile = $dockerFileDirectory . DIRECTORY_SEPARATOR . 'Dockerfile';
    if (!is_file($dockerFile)) {
        throw new Exception("Unable to find the Dockerfile {$dockerFile}");
    }
    $dockerFileMD5 = @md5_file($dockerFile);
    if ($dockerFileMD5 === false) {
        throw new Exception("Failed to calculate the MD5 of {$dockerFile}");
    }
    $docker = new Docker();
    $dockerImage = null;
    foreach ($docker->getImagesByReference(DOCKER_REPOSITORY) as $di) {
        if ($di->getTag() === $dockerFileMD5) {
            $dockerImage = $di;
        } else {
            fwrite(STDOUT, 'Deleting old Docker image ' . $di->getReference() . '... ');
            $docker->deleteImage($di);
            fwrite(STDOUT, "done.\n");
        }
    }
    if ($dockerImage === null) {
        fwrite(STDOUT, "Creating Docker image\n");
        $dockerImage = $docker->createImage($dockerFile, DOCKER_REPOSITORY . ':' . $dockerFileMD5, $punicDataDirectory . '/bin', ['--rm'], true);
    }
    foreach ($_SERVER['argv'] as $index => $arg) {
        if ($index === 0) {
            $command = './bin/punic-build-data';
        } else {
            $command .= ' ' . escapeshellarg($arg);
        }
    }
    $docker->runImage(
        $dockerImage,
        $command,
        [
            '/punicdata' => $punicDataDirectory,
        ],
        [
            '--rm',
            '--workdir /punicdata',
        ],
        true
    );
} catch (Exception $x) {
    fwrite(STDERR, trim($x->getMessage()) . "\n");
    exit(1);
}
// PUNICDATA_ROOTDIR="`pwd`";
// popd > /dev/null
// docker-compose --file "${PUNICDATA_ROOTDIR}/docker/docker-compose.yml" --project-directory "${PUNICDATA_ROOTDIR}" run --rm punicdata ./bin/punic-build-data $@

class Docker
{
    /**
     * @var bool|null
     */
    private static $available = null;

    /**
     * @throws Exception
     */
    public function __construct()
    {
        if (!static::isAvailable()) {
            throw new Exception('docker is not installed');
        }
    }

    /**
     * @return bool
     */
    public static function isAvailable()
    {
        if (self::$available === null) {
            try {
                static::runDocker('--version', false);
                self::$available = true;
            } catch (Exception $x) {
                self::$available = false;
            }
        }

        return self::$available;
    }

    /**
     * @param string $dockerReference
     * @param mixed $reference
     *
     * @throws Exception
     *
     * @return DockerImage[]
     */
    public function getImagesByReference($reference)
    {
        $result = [];
        $output = static::runDocker('images --all ' . escapeshellarg("--filter=reference={$reference}") . ' --format ' . escapeshellarg(DockerImage::FORMAT), false);
        foreach (explode("\n", $output) as $line) {
            if (trim($line) !== '') {
                $dockerImage = DockerImage::fromFormat($line);
                if ($dockerImage === null) {
                    throw new Exception("docker failed:\n{$output}");
                }
                $result[] = $dockerImage;
            }
        }

        return $result;
    }

    /**
     * @param DockerImage $dockerImage
     * @param bool $showProgress
     *
     * @throws Exception
     */
    public function deleteImage(DockerImage $dockerImage, $showProgress = false)
    {
        static::runDocker('rmi --force ' . escapeshellarg($dockerImage->getId()), $showProgress);
    }

    /**
     * @param string $dockerFile
     * @param string $reference
     * @param array $options
     * @param bool $showProgress
     * @param mixed $path
     *
     * @throws Exception
     *
     * @return DockerImage $dockerImage
     */
    public function createImage($dockerFile, $reference, $path = '', array $options = [], $showProgress = false)
    {
        $dockerFile = str_replace('/', DIRECTORY_SEPARATOR, $dockerFile);
        $args = [];
        $args[] = 'build';
        $args[] = '--file ' . escapeshellarg($dockerFile);
        $args[] = '--tag ' . escapeshellarg((string) $reference);
        $args = array_merge($args, $options);
        $path = (string) $path;
        if ($path === '') {
            $path = dirname($dockerFile);
        }
        $path = str_replace('/', DIRECTORY_SEPARATOR, $path);
        $args[] = escapeshellarg($path);
        static::runDocker(implode(' ', $args), $showProgress);
        $built = $this->getImagesByReference($reference);
        if (count($built) !== 1) {
            throw new Exception('Failed find built docker image.');
        }

        return $built[0];
    }

    /**
     * @param DockerImage $dockerImage
     * @param string $command
     * @param array $volumes
     * @param array $options
     * @param mixed $showProgress
     *
     * @return string|null
     */
    public function runImage(DockerImage $dockerImage, $command, array $volumes = [], array $options = [], $showProgress = false)
    {
        $args = [];
        $args[] = 'run';
        if ($showProgress && !in_array('--tty', $options)) {
            $args[] = '--tty';
        }
        foreach ($volumes as $mapped => $to) {
            $args[] = '--volume ' . escapeshellarg(str_replace(DIRECTORY_SEPARATOR, '/', $to) . ':' . $mapped);
        }
        $args = array_merge($args, $options);
        $args[] = $dockerImage->getReference();
        $args[] = $command;

        return static::runDocker(implode(' ', $args), $showProgress);
    }

    /**
     * @param string $args
     * @param mixed $passthru
     *
     * @throws Exception
     *
     * @return string|null
     */
    protected static function runDocker($args, $passthru)
    {
        $rc = -1;
        if ($passthru) {
            @passthru("docker {$args}", $rc);
            if ($rc !== 0) {
                throw new Exception('docker failed!');
            }

            return null;
        } else {
            $output = [];
            @exec("docker {$args} 2>&1", $output, $rc);
            if ($rc !== 0) {
                throw new Exception("docker failed:\n" . trim(implode("\n", $output)));
            }

            return trim(implode("\n", $output));
        }
    }
}

class DockerImage
{
    /**
     * @var string
     */
    const FORMAT = '{{.ID}} {{.Repository}} {{.Tag}}';

    /**
     * @var string
     */
    protected $id;

    /**
     * @var string
     */
    protected $repository;

    /**
     * @var string
     */
    protected $tag;

    /**
     * @param string $format
     *
     * @return static|null
     */
    public static function fromFormat($format)
    {
        $matches = null;
        if (!preg_match('/^(\S+) (\S+) (\S+)$/', $format, $matches)) {
            return null;
        }
        $result = new static();
        $result->id = $matches[1];
        $result->repository = $matches[2];
        $result->tag = $matches[3];

        return $result;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string
     */
    public function getRepository()
    {
        return $this->repository;
    }

    /**
     * @return string
     */
    public function getTag()
    {
        return $this->tag;
    }

    /**
     * @return string
     */
    public function getReference()
    {
        return $this->getRepository() . ':' . $this->getTag();
    }
}
